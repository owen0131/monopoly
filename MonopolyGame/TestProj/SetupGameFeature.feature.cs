// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TestProj
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Setup the game")]
    public partial class SetupTheGameFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SetupGameFeature.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Setup the game", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Start the app")]
        [NUnit.Framework.TestCaseAttribute("1", "Fail", null)]
        [NUnit.Framework.TestCaseAttribute("2", "Success", null)]
        [NUnit.Framework.TestCaseAttribute("6", "Success", null)]
        [NUnit.Framework.TestCaseAttribute("7", "Fail", null)]
        [NUnit.Framework.TestCaseAttribute("0", "Fail", null)]
        public virtual void StartTheApp(string players, string response, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start the app", exampleTags);
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.When("I start the game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 5
 testRunner.And("Player is prompted for how many players", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 6
 testRunner.And(string.Format("They enter {0}", players), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 7
 testRunner.Then(string.Format("User receieves {0}", response), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Give Player money")]
        public virtual void GivePlayerMoney()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Give Player money", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.When("Player is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
 testRunner.Then("Their balance is $1500", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Buildings")]
        public virtual void VerifyBuildings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Buildings", ((string[])(null)));
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
 testRunner.When("All players are created and they receive money", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
 testRunner.Then("The bank contains 32 houses and 12 hotels", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Assign Order")]
        public virtual void AssignOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign Order", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.When("Number of players is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
 testRunner.Then("Order is randomly assigned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Display Board")]
        [NUnit.Framework.TestCaseAttribute("1", "\"GO\"", null)]
        [NUnit.Framework.TestCaseAttribute("2", "\"Mediterranean Avenue\"", null)]
        [NUnit.Framework.TestCaseAttribute("3", "\"Community Chest\"", null)]
        [NUnit.Framework.TestCaseAttribute("4", "\"Baltic Avenue\"", null)]
        [NUnit.Framework.TestCaseAttribute("5", "\"Income Tax\"", null)]
        [NUnit.Framework.TestCaseAttribute("6", "\"Reading Railroad\"", null)]
        [NUnit.Framework.TestCaseAttribute("7", "\"Oriental Avenue\"", null)]
        [NUnit.Framework.TestCaseAttribute("8", "\"Chance\"", null)]
        [NUnit.Framework.TestCaseAttribute("9", "\"Vermont Avenue\"", null)]
        [NUnit.Framework.TestCaseAttribute("10", "\"Conneticut Avenue\"", null)]
        [NUnit.Framework.TestCaseAttribute("11", "\"Jail\"", null)]
        [NUnit.Framework.TestCaseAttribute("12", "\"St. Charles Place\"", null)]
        [NUnit.Framework.TestCaseAttribute("13", "\"Electric Company\"", null)]
        [NUnit.Framework.TestCaseAttribute("14", "\"States Avenue\"", null)]
        [NUnit.Framework.TestCaseAttribute("15", "\"Virginia Avenue\"", null)]
        [NUnit.Framework.TestCaseAttribute("16", "\"Pennsyvania Railroad\"", null)]
        [NUnit.Framework.TestCaseAttribute("17", "\"St. James Place\"", null)]
        [NUnit.Framework.TestCaseAttribute("18", "\"Community Chest\"", null)]
        [NUnit.Framework.TestCaseAttribute("19", "\"Tennessee Avenue\"", null)]
        [NUnit.Framework.TestCaseAttribute("20", "\"New York Avenue\"", null)]
        [NUnit.Framework.TestCaseAttribute("21", "\"Free Parking\"", null)]
        [NUnit.Framework.TestCaseAttribute("22", "\"Kentucky Avenue\"", null)]
        [NUnit.Framework.TestCaseAttribute("23", "\"Chance\"", null)]
        [NUnit.Framework.TestCaseAttribute("24", "\"Indiana Avenue\"", null)]
        [NUnit.Framework.TestCaseAttribute("25", "\"Illinois Avenue\"", null)]
        [NUnit.Framework.TestCaseAttribute("26", "\"B & O Railroad\"", null)]
        [NUnit.Framework.TestCaseAttribute("27", "\"Atlantic Avenue\"", null)]
        [NUnit.Framework.TestCaseAttribute("28", "\"Ventnor Avenue\"", null)]
        [NUnit.Framework.TestCaseAttribute("29", "\"Water Works\"", null)]
        [NUnit.Framework.TestCaseAttribute("30", "\"Marvin Gardens\"", null)]
        [NUnit.Framework.TestCaseAttribute("31", "\"Go To Jail\"", null)]
        [NUnit.Framework.TestCaseAttribute("32", "\"Pacific Avenue\"", null)]
        [NUnit.Framework.TestCaseAttribute("33", "\"North Carolina Avenue\"", null)]
        [NUnit.Framework.TestCaseAttribute("34", "\"Community Chest\"", null)]
        [NUnit.Framework.TestCaseAttribute("35", "\"Pennsylvania Avenue\"", null)]
        [NUnit.Framework.TestCaseAttribute("36", "\"Short Line\"", null)]
        [NUnit.Framework.TestCaseAttribute("37", "\"Chance\"", null)]
        [NUnit.Framework.TestCaseAttribute("38", "\"Park Place\"", null)]
        [NUnit.Framework.TestCaseAttribute("39", "\"Luxury Tax\"", null)]
        [NUnit.Framework.TestCaseAttribute("40", "\"Boardwalk\"", null)]
        public virtual void DisplayBoard(string location, string name, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Display Board", exampleTags);
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
 testRunner.When("the board is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
 testRunner.Then(string.Format("{0} is {1}", location, name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player Picks a Token")]
        [NUnit.Framework.TestCaseAttribute("\"Battleship\"", "Success", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hat\"", "Success", null)]
        [NUnit.Framework.TestCaseAttribute("\"T-Rex\"", "Success", null)]
        [NUnit.Framework.TestCaseAttribute("\"Cat\"", "Success", null)]
        [NUnit.Framework.TestCaseAttribute("\"Car\"", "Success", null)]
        [NUnit.Framework.TestCaseAttribute("\"Duck\"", "Success", null)]
        [NUnit.Framework.TestCaseAttribute("\"Penguin\"", "Success", null)]
        [NUnit.Framework.TestCaseAttribute("\"Dog\"", "Success", null)]
        [NUnit.Framework.TestCaseAttribute("\"NotDog\"", "Fail", null)]
        [NUnit.Framework.TestCaseAttribute("\"\"", "Fail", null)]
        public virtual void PlayerPicksAToken(string token, string @event, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player Picks a Token", exampleTags);
#line 76
this.ScenarioSetup(scenarioInfo);
#line 77
 testRunner.When("Order is assigned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 78
 testRunner.And("Player is prompted to pick a token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
 testRunner.And(string.Format("Player enters {0}", token), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
 testRunner.Then(string.Format("User recieves {0}", @event), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player selects Token")]
        [NUnit.Framework.TestCaseAttribute("\"Battleship\"", "\"Hat, T-Rex, Cat, Car, Duck, Penguin, Dog\"", null)]
        public virtual void PlayerSelectsToken(string token, string tokensLeft, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player selects Token", exampleTags);
#line 95
this.ScenarioSetup(scenarioInfo);
#line 96
 testRunner.When(string.Format("Player selects Token {0}", token), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 97
 testRunner.Then(string.Format("Available Tokens left are {0}", tokensLeft), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Place tokens on board")]
        public virtual void PlaceTokensOnBoard()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Place tokens on board", ((string[])(null)));
#line 104
this.ScenarioSetup(scenarioInfo);
#line 105
 testRunner.When("the game is setup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 106
 testRunner.Then("the board is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 107
 testRunner.And("All pieces are on \"go\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
